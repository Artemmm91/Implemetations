<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "TestIterators():unordered_map_test.cpp">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find&lt;double const&amp;&gt;(double const&amp;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "void UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert&lt;std::__1::__wrap_iter&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const*&gt; &gt;(std::__1::__wrap_iter&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const*&gt;, std::__1::__wrap_iter&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const*&gt;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase(UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const&gt;):unordered_map.h">
         <PersistentStrings>
            <PersistentString
               value = "pointers_to_ends[hash_node]">
            </PersistentString>
            <PersistentString
               value = "pointers_to_beginning[hash_node]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "(null):(null)">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;int const, int&gt; &gt; UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::find&lt;int&gt;(int&amp;&amp;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;int const, int&gt; &gt; UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::find&lt;int const&amp;&gt;(int const&amp;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert(std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const&amp;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "std::__1::optional&lt;UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt; UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_find&lt;UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;int const, int&gt; &gt;, int const&amp;&gt;(int const&amp;, unsigned long) const:unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::convert(UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const&gt;):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;double, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::hash&lt;double&gt;, std::__1::equal_to&lt;double&gt;, std::__1::allocator&lt;std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert_node(std::__1::pair&lt;double const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;*):unordered_map.h">
      </ContextState>
      <ContextState
         contextName = "SimpleTest():unordered_map_test.cpp">
      </ContextState>
      <ContextState
         contextName = "UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::base_iterator&lt;std::__1::pair&lt;int const, int&gt; &gt; UnorderedMap&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, int&gt; &gt; &gt;::try_find&lt;int const&amp;&gt;(int const&amp;, unsigned long&amp;):unordered_map.h">
         <PersistentStrings>
            <PersistentString
               value = "hash_function(key)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
   </ContextStates>
</VariablesViewState>
